print "lock";
alias userSP R5;
alias systemNum R1;

//userSP-5 is the position that stores the system call number
userSP = SP;
systemNum = [([PTBR + 2 * ((userSP - 5) / 512) ] * 512 )  + ((userSP - 5) % 512)];
print systemNum;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 13] = SP;
SP = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1]*16 + 11]*512 - 1;

//semlock
if(systemNum==19)then
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 19;
    
    alias semID R2;
    semID = [([PTBR + 2 * ((userSP - 4) / 512) ] * 512 )  + ((userSP - 4) % 512)];
    alias per_process R3;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;

    alias counter R4;
    counter = 0;
    while (counter < 8) do
        if ([per_process + counter * 2 + 1 ] == semID && [per_process + counter * 2] == 1) then
            break;
        endif;
        counter = counter + 1;
    endwhile;

    if (semID < 0 || semID > 7 || [SEMAPHORE_TABLE + semID * 4 + 1 ] == 0 || counter >= 8) then  //last one is for process count
        
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;

    while ([SEMAPHORE_TABLE + semID * 4] != -1 && [SEMAPHORE_TABLE + semID * 4] != [SYSTEM_STATUS_TABLE + 1] ) do
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 4] = WAIT_SEMAPHORE;
        [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 5] = semID;
    
        multipush (R1 , R2 , R3 , R4 ,R5);
        call MOD_5;
        multipop (R1 , R2 , R3 , R4, R5);

    endwhile;

    [SEMAPHORE_TABLE + semID * 4] = [SYSTEM_STATUS_TABLE + 1];

    [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = 0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 9] = 0;
    SP = userSP;
    ireturn;

endif;

if (systemNum == 20) then

    print("evide");
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 20;
    alias semID R2;
    semID = [([PTBR + 2 * ((userSP - 4) / 512) ] * 512 )  + ((userSP - 4) % 512)];

    alias per_process R3;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;

    alias counter R4;
    counter = 0;
    while (counter < 8) do
        if ([per_process + counter * 2 + 1 ] == semID && [per_process + counter * 2] == 1) then
            break;
        endif;
        counter = counter + 1;
    endwhile;
    
    
    //checking if the semid is valid
    if (semID < 0 || semID > 7 || [SEMAPHORE_TABLE + semID * 4 + 1 ] == 0 || counter >= 8) then
        [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -1;
        [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
        SP = userSP;
        ireturn;
    endif;


    if ([SEMAPHORE_TABLE + 4 * semID] != -1) then
        if ([SEMAPHORE_TABLE + 4 * semID] != [SYSTEM_STATUS_TABLE + 1]) then
            [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = -2;
            [PROCESS_TABLE + 16 * [SYSTEM_STATUS_TABLE + 1] + 9] = 0;
            SP = userSP;
            ireturn; 
        endif;

        [SEMAPHORE_TABLE + 4 * semID] = -1;         //locking pid to -1
        counter = 0;
        while (counter < 16) do
            if ([PROCESS_TABLE + counter * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + counter * 16 + 5] == semID) then
                [PROCESS_TABLE + counter * 16 + 4] = READY;
            endif;
            counter = counter + 1;
        endwhile;
    endif;

    [([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512)] = 0;
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 9] = 0;
    SP = userSP;
    ireturn;

endif;

