alias functionNum R1;
alias currentPID R2;

//get pcb entry
if (functionNum ==1) then
	alias counter R4;
	counter = 0;
	while(counter < MAX_PROC_NUM) do
		if([PROCESS_TABLE + (counter*16) + 4] == TERMINATED) then
			break;
		endif;
		counter = counter + 1;
	endwhile;
   
    if(counter == MAX_PROC_NUM) then
   		R0 = -1;
   		return;
    endif;

    //Initialize PID, PTBR and PTLR for new process
   [PROCESS_TABLE + (counter*16) + 1] = counter;
   [PROCESS_TABLE + (counter*16) + 4] = ALLOCATED;
   [PROCESS_TABLE + (counter*16) + 14] = PAGE_TABLE_BASE + (20*counter);
   [PROCESS_TABLE + (counter*16) + 15] = 10;  
   
   R0 = counter;
//    print R0;
   return;

// Free User Area Page
else if(functionNum == 2) then
    alias per_process R5;
    alias counter R4;
    counter = 0;
    per_process = [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1 ] * 16 + 11] * 512 + 512 - 16;

    while (counter < 8) do
        if ([per_process + 0] == 1 ) then
        //invoke the resource manager module to release the semaphore
        multipush (R0 , R1 , R2 , R3 , R4 , R5);
        R1 = 7;
        R2 = [per_process + 1];
        R3 = currentPID;
        call MOD_2;
        multipop (R0 , R1 , R2 , R3 , R4,  R5);
        endif;

        per_process = per_process + 2;
        counter = counter + 1;
    endwhile;
    
    alias user_area_page_num R3; 
	user_area_page_num = [(PROCESS_TABLE + 16*currentPID) + 11];

    multipush(R1, R2, R3);

	functionNum = 2;
	R2 = user_area_page_num;
	call MOD_2;
    multipop(R1, R2, R3);
	return;

//Exit Process
else if(functionNum == 3) then

    // Invoking the Free Page Table function
	multipush(R1, R2, R3);
	functionNum = 4;
	call MOD_1;
	multipop(R1, R2, R3);

    // Invoking the Free user Area Page function
	multipush(R1, R2, R3);
	functionNum = 2;
	call MOD_1;
	multipop(R1, R2, R3);

    [(PROCESS_TABLE + 16*currentPID) + 4] = TERMINATED;

	alias current_process R4;
    current_process = 1;
	//if we are not in the exec system call 
	if ( [PROCESS_TABLE + currentPID * 16 + 9] != 9) then 
        while (current_process < 16) do
            if ( [PROCESS_TABLE + current_process * 16 + 4] == WAIT_PROCESS && [PROCESS_TABLE + current_process * 16 + 5] == currentPID ) then 
                [PROCESS_TABLE + current_process * 16 + 4] = READY;
            endif;

            if ([PROCESS_TABLE + 16 * current_process + 2] == currentPID ) then 
                [PROCESS_TABLE + 16 * current_process + 2] = -1;
            endif;
            current_process = current_process + 1;
        endwhile;
    endif;
	

// Free Page Table	
else if(functionNum == 4) then
    alias ptbr R4;
	alias i R5;
	ptbr = [(PROCESS_TABLE + 16*currentPID) + 14];
	
    // invalidate the page table entries for the library pages
	[ptbr+0] = -1;
	[ptbr+1] = "0000";
	[ptbr+2] = -1;
	[ptbr+3] = "0000";

    i = 4;
    while(i < 20) do
		
		if([ptbr + i] != -1) then
			// invoking the Release Page function
			multipush(R1, R2, R3, R4, R5);
		
			functionNum = 2;
			R2 = [ptbr + i];
			call MOD_2;
		
			multipop(R1, R2, R3, R4, R5);
		endif;

		[ptbr + (i+1)] = "0000";
		i = i + 2;

	endwhile;

    alias disk_map_entry R6;
	alias j R7;
	i = 0;

	disk_map_entry = DISK_MAP_TABLE + (currentPID*10);
	j = 0;
	while(j <= 9) do
		if((((j >= 2) && (j <= 3)) || ((j >= 8) && (j <= 9))) && [disk_map_entry + j] != -1) then
			// invoking the Release block function
			multipush(R1, R2, R3, R4, R5, R6, R7);
			functionNum = 4;
			R2 = [disk_map_entry + j];
			call MOD_2;
			multipop(R1, R2, R3, R4, R5, R6, R7);
		endif;
		[disk_map_entry + j] = -1;
		j = j + 1;
	endwhile;
	return;

endif;
endif;
endif;
endif;

return;
