alias functionNum R1;
alias currentPID R2;

//aquire terminal
if( functionNum == 8 ) then
    while( [TERMINAL_STATUS_TABLE] == 1 ) do
        [PROCESS_TABLE + currentPID*16 +4] = WAIT_TERMINAL;
        multipush(R0,R1,R2);
        //call scheduler
        call MOD_5;
        multipop(R0,R1,R2);
    endwhile ;

    [TERMINAL_STATUS_TABLE] = 1;
    [TERMINAL_STATUS_TABLE+1] = currentPID;
    return;

//release terminal
else if (functionNum == 9) then
    if (currentPID != [TERMINAL_STATUS_TABLE + 1]) then
        R0 = -1;
        return;
    endif;
    [TERMINAL_STATUS_TABLE] = 0;
    alias i R3;
    i = 1;
    while(i < MAX_PROC_NUM) do
        if(([PROCESS_TABLE + 16 * i + 4] == WAIT_TERMINAL)) then
            [PROCESS_TABLE + 16 * i + 4] = READY;
        endif;
        i = i + 1;
    endwhile;
    R0 = 0;
    return;

//Aquire disk
else if (functionNum==3) then
    while( [DISK_STATUS_TABLE]==1 ) do
        [PROCESS_TABLE+16*currentPID+4] = WAIT_DISK;
        multipush(R1,R2);
        call MOD_5;
        multipop(R1,R2);
    endwhile ;

    [DISK_STATUS_TABLE] = 1;
    [DISK_STATUS_TABLE + 4] = currentPID;
    return;

//acquire semaphore
else if (functionNum==6)then
    alias counter R3;

    counter = 0;
    while (counter < MAX_SEM_COUNT) do
        if ([SEMAPHORE_TABLE + counter * 4 + 1 ] == 0) then
            break;
        endif;
        counter = counter + 1;
    endwhile;


    if (counter >= MAX_SEM_COUNT) then
        R0 = -1;
        return;
    endif;

    //set the process count to 1
    [SEMAPHORE_TABLE + counter * 4 + 1] = 1;
    [SEMAPHORE_TABLE + counter * 4] = -1;             
    R0 = counter;

    return;

//release semaphore
else if (functionNum == 7) then
    
    alias semID R2;
    alias currentPID R3;

    if ([SEMAPHORE_TABLE + semID * 4 + 0 ] == currentPID) then
        [SEMAPHORE_TABLE + semID * 4 + 0] = -1; 
        alias counter R4;
        counter = 0;
        while (counter < 16) do
            if ([PROCESS_TABLE + counter * 16 + 4] == WAIT_SEMAPHORE && [PROCESS_TABLE + counter * 16 + 5] == semID) then
                [PROCESS_TABLE + counter * 16 + 4] = READY;
            endif;
            counter = counter + 1;
        endwhile;

        //decrement the process count
        [SEMAPHORE_TABLE + semID * 4 + 1] = [SEMAPHORE_TABLE + semID * 4 + 1] -1;
        R0=0;
        return;
    endif; 
    R0 = -1;
    return;

    return;

endif;
endif;  
endif;   
endif;
endif;

return;