alias userSP R4;
alias currentPid R6;
userSP = SP;
[PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 13] = SP;
SP = ([PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11]*512) - 1;

currentPid = [SYSTEM_STATUS_TABLE + 1];
//set mode flag
[PROCESS_TABLE + currentPid *16 + 9] = 8;

//invoke get pcb for new pid
multipush(R1,R2,R3,R4,R5,R6);
R1 = 1;
call MOD_1;  
multipop(R1,R2,R3,R4,R5,R6);

if( R0 ==-1 ) then
    alias physicalAddressRetVal R5;
    physicalAddressRetVal = ([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512);
    [physicalAddressRetVal] = -1;
    
    SP = userSP;                         
    [PROCESS_TABLE + [SYSTEM_STATUS_TABLE + 1] * 16 + 9] = 0; 
    ireturn;
endif ;

alias childPid R7;
childPid = R0;
alias ptbrChild R8;
ptbrChild = [PROCESS_TABLE + (childPid*16) + 14];

//if heap pages not allocated
if ([PTBR + 4] == -1) then
    multipush(R1, R2, R3, R4, R5, R6, R7, R8);
    R1 = 1;
    call MOD_2;
    [PTBR + 4] = R0;
    [PTBR + 5] = "0110";

    R1 = 1;
    call MOD_2;
    [PTBR + 6] = R0;
    [PTBR + 7] = "0110";
    multipop(R1, R2, R3, R4, R5, R6, R7, R8);
endif;

//get pages for stack
alias counter R9;
counter = 0;
while(counter < 2) do 
	// calling get Free Page from Memory Mananger
	multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
	R1 = 1;
	call MOD_2;
	multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);
	[ptbrChild + 16 + (counter*2)] = R0;
	[ptbrChild + 16 + (counter*2) + 1] = "0110";
	counter = counter + 1;
endwhile;

//Get page for user area
multipush(R1, R2, R3, R4, R5, R6, R7, R8, R9);
R1 = 1;
call MOD_2;
multipop(R1, R2, R3, R4, R5, R6, R7, R8, R9);
[PROCESS_TABLE + (childPid * 16) + 11] =  R0;

//initialize process table for child
[PROCESS_TABLE + (childPid*16) + 3] = [PROCESS_TABLE + (currentPid*16) + 3];
[PROCESS_TABLE + (childPid*16) + 6] = [PROCESS_TABLE + (currentPid*16) + 6];
[PROCESS_TABLE + (childPid*16) + 7] = [PROCESS_TABLE + (currentPid*16) + 7];
[PROCESS_TABLE + (childPid*16) + 10] = [PROCESS_TABLE + (currentPid*16) + 10];
[PROCESS_TABLE + (childPid*16) + 13] = [PROCESS_TABLE + (currentPid*16) + 13];
[PROCESS_TABLE + (childPid*16) + 14] = PAGE_TABLE_BASE + 20*childPid;

[PROCESS_TABLE + (childPid*16) + 9] = 0;
[PROCESS_TABLE + (childPid*16) + 12] = 0;
[PROCESS_TABLE + (childPid*16) + 0] = 0;

[PROCESS_TABLE + (childPid*16) + 2] = currentPid;
[PROCESS_TABLE + (childPid*16) + 4] = CREATED;

ptbrChild = [PROCESS_TABLE + (childPid*16) + 14];

//copy per process table
alias i R11;
alias j R12;
i = ([PROCESS_TABLE + (currentPid*16) + 11] * 512) + (512 - 16);
j = ([PROCESS_TABLE + (childPid*16) + 11] * 512) + (512 - 16);
counter = 0;
while(counter < 16) do
	[j] = [i];
	counter = counter + 1;
	j = j + 1;
	i = i + 1;
endwhile;

//copy disk map table
counter = 0;
while(counter < 10) do
	[DISK_MAP_TABLE + (childPid*10) + counter] = [DISK_MAP_TABLE + (currentPid*10) + counter];
	counter = counter + 1;
endwhile;

//copy heap, code and library entries from parent pageTable to child
counter = 0;
while(counter <= 7) do
	[ptbrChild + (counter*2)] = [PAGE_TABLE_BASE + (currentPid*20) + (counter*2)];
	if([ptbrChild + (counter*2)] != -1) then
		[MEMORY_FREE_LIST + [ptbrChild + (counter*2)]] = [MEMORY_FREE_LIST + [ptbrChild + (counter*2)]] + 1;
	endif;
	[ptbrChild + (counter*2) + 1] = [PAGE_TABLE_BASE + (currentPid*20) + (counter*2) + 1];
	counter = counter + 1;
endwhile;

//Copy content of the user stack pages of the parent to the user stack pages of the child word by word
counter = 0; 
while (counter < 512) do
    [[PAGE_TABLE_BASE + childPid*20 + 16] * 512 + counter] = [[PAGE_TABLE_BASE + currentPid*20 + 16] * 512 + counter];
    counter = counter + 1;
endwhile;

counter = 0;
while (counter < 512) do
    [[PAGE_TABLE_BASE + childPid*20 + 18] * 512 + counter] = [[PAGE_TABLE_BASE + currentPid*20 + 18] * 512 + counter];
    counter = counter + 1;
endwhile;

//Store BP on top of kernel stack of child Process
[[PROCESS_TABLE + (childPid * 16) + 11]*512] = BP;

//return values
alias physicalAddressRetVal R5;
physicalAddressRetVal = ([PTBR + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512);
[physicalAddressRetVal] = childPid;

physicalAddressRetVal = ([ptbrChild + 2 * ((userSP - 1) / 512) ] * 512 )  + ((userSP - 1) % 512);
[physicalAddressRetVal] = 0;

[PROCESS_TABLE + currentPid *16 + 9] = 0;
SP = userSP;

ireturn;