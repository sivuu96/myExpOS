//load init prog from disk
loadi(65,7);
loadi(66,8);

//interrupt 10 routine
loadi(22,35);
loadi(23,36);

//exception handler
loadi(2,15);
loadi(3,16);

//load library from disk
loadi(63,13);
loadi(64,14);

//load timer interrupt routine
loadi(4, 17);
loadi(5, 18);

//load INT7 from disk to memory.
loadi(16,29);
loadi(17,30);

//load INT6 from disk to memory.
loadi(14,27);
loadi(15,28);

//console interrupt routine
loadi(8,21);
loadi(9,22);

//load scheduler
loadi(50,63);
loadi(51,64);

//load module 0
loadi(40,53);
loadi(41,54);

//load module 4
loadi(48,61);
loadi(49,62);

//load module 1
loadi(42,55);
loadi(43,56);

//load module 2
loadi(44,57);
loadi(45,58);

//load int9
loadi(20,33);
loadi(21,34);

//load inode table
loadi(59,3);
loadi(60,4);

//load disk interrupt handler
loadi(6, 19);
loadi(7, 20);

// load the Disk Free List
loadi(61, 2);

//load int 8
loadi(18, 31);
loadi(19, 32);

//--------INIT PROG(pid=1)------------

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//load library to logical pages 0 and 1 from memory pages 63 and 64
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//intialize heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//load init code from memory pages 65 and 66 to logical page 4 and 5
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";



[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+20] = CREATED;
[PROCESS_TABLE+27] = 80;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] =PAGE_TABLE_BASE + 20;
[PROCESS_TABLE+31] = 10;


//store entry point in the header of the executable file to the top of the user stack
[76*512] = [65*512+1];

// initialize per process resource table for init
alias j R0;
alias i R1;
i = [(PROCESS_TABLE + 16) + 11] * 512 + (512 - 16);
j = 0;
while(j < 16) do
	[i] = -1;
	i = i + 1;
	j = j + 1;
endwhile;


//Initialize STATE field of all other process table entries to TERMINATED.
i=2;
while( i < MAX_PROC_NUM) do
    [PROCESS_TABLE+i*16+4]=TERMINATED;
    i=i+1;
endwhile ;

[TERMINAL_STATUS_TABLE] = 0;
[DISK_STATUS_TABLE] = 0;

// Initialize the memory free list with value 1 for pages used and 0 for free pages
i = 0;
while(i < 128) do
	if(i <= 82) then
		[MEMORY_FREE_LIST + i] = 1;
	else 
		[MEMORY_FREE_LIST + i] = 0;
	endif;
	i = i + 1;
endwhile;

[SYSTEM_STATUS_TABLE + 3] = 0;
[SYSTEM_STATUS_TABLE + 2] = (128-1) - 82;

// Initialize the disk map table entries for the INIT process
i = 0;
while(i <= 9) do					
	[DISK_MAP_TABLE + 16 + i] = -1;
	if((i >= 4) && (i <= 7)) then //code page
		[DISK_MAP_TABLE + 16 + i] = [PTBR + (2*i)];
	endif;
	i = i + 1;
endwhile;

return;