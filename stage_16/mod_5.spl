// ================SCHEDULER===================

alias currentPID R0;
currentPID = [SYSTEM_STATUS_TABLE + 1];


multipush(BP);

// compute process table entry of current running process
alias process_table_entry R1;
process_table_entry = PROCESS_TABLE + currentPID * 16;
[process_table_entry + 12] = SP % 512;
[process_table_entry + 14] = PTBR;
[process_table_entry + 15] = PTLR;


alias i R2;
alias j R3;
alias newPID R4;
i = 0;
j = currentPID+1;
newPID = 0;

while (i < MAX_PROC_NUM) do
	if(j == MAX_PROC_NUM) then
		j = 1;
	endif;
	if(([PROCESS_TABLE + 16*j + 4] == CREATED) || ([PROCESS_TABLE + 16*j + 4] == READY)) then
		newPID = j;
		break;
	endif;
	i = i+1;
	j = j+1;
endwhile;

alias new_process_entry R5;
new_process_entry = PROCESS_TABLE + 16*newPID;

// Obtain User Area Page number and kernel stack pointer value from Process Table entry of the new process and // set SP as (User Area Page number) * 512 + (Kernel Stack pointer value)
SP = [new_process_entry + 11]*512 + [new_process_entry + 12];

// Restore PTBR and PTLR from the corresponding fields in the Process Table entry of the new process.
PTBR = [new_process_entry + 14];
PTLR = [new_process_entry + 15];

// Set the PID of the new process in the current PID field of the System Status Table
[SYSTEM_STATUS_TABLE + 1] = newPID;

if([new_process_entry + 4] == CREATED) then
	SP = [new_process_entry + 13];
	[new_process_entry + 4] = RUNNING;
	[new_process_entry + 9] = 0;
	ireturn;
endif;

// Set the state of the new process as RUNNING
[new_process_entry + 4] = RUNNING;

// Restore the BP of the new process from the top of it's kernel stack
multipop(BP);

return;






