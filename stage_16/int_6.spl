[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 7;

alias userSP R0;
userSP=SP;

// UPTR = SP
[PROCESS_TABLE + ( [SYSTEM_STATUS_TABLE + 1] * 16) + 13] = SP;

// SP = (UArea Page number * 512 - 1) of the current process
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 11] * 512 - 1;


alias fileDescPhysicalAddr R3;
alias physicalPageNum R1;
alias offset R2;
// Address translation of file descriptor address

physicalPageNum = [PTBR + 2 * ((userSP - 4)/ 512)];
offset = (userSP - 4) % 512;
fileDescPhysicalAddr = (physicalPageNum * 512) + offset;
alias fileDescriptor R4;
fileDescriptor=[fileDescPhysicalAddr];

if(fileDescriptor != -1) then
	alias RetVal R5;
	RetVal = ([PTBR + 2 * ((userSP - 1) / 512)] * 512) + ((userSP - 1) % 512);
	[RetVal] = -1;

else 

	alias wordAddress R5;
	wordAddress = [[PTBR + 2 * ((userSP - 3) / 512)] * 512 + ((userSP - 3) % 512)];
   
	//--------------- READING FROM TERMINAL ------------------
	// pushing registers into the stack
	
	multipush(R0, R1, R2, R3, R4, R5);
	R1 = 4;		//R1
	R2 = [SYSTEM_STATUS_TABLE + 1];		//R2
	R3 = wordAddress;		//R3
        
	call MOD_4;
	

	multipop(R0, R1, R2, R3, R4, R5);


	alias RetVal R6;
	RetVal = ([PTBR + 2 * ((userSP - 1)/ 512)] * 512) + ((userSP - 1) % 512);
	[RetVal] = 0;

endif;

[PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 9] = 0;
SP = [PROCESS_TABLE + ([SYSTEM_STATUS_TABLE + 1] * 16) + 13];

ireturn;