//load init prog from disk
loadi(65,7);
loadi(66,8);
//interrupt 10 routine
loadi(22,35);
loadi(23,36);
//exception handler
loadi(2,15);
loadi(3,16);
//load library from disk
loadi(63,13);
loadi(64,14);
//load timer interrupt routine
loadi(4, 17);
loadi(5, 18);
//load INT7 from disk to memory.
loadi(16,29);
loadi(17,30);
//load idle file
loadi(69,11);
loadi(70,12);


//------------IDLE PROCESS--------------
PTBR = PAGE_TABLE_BASE;
PTLR = 10;

//Library
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//Heap
[PTBR+4] = -1;
[PTBR+5] = "0000";
[PTBR+6] = -1;
[PTBR+7] = "0000";

//Code
[PTBR+8] = 69;
[PTBR+9] = "0100";
[PTBR+10] = 70;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//Stack
[PTBR+16] = 81;
[PTBR+17] = "0110";
[PTBR+18] = -1;
[PTBR+19] = "0000";

///Storing the IP in the top of the user stack
[81 * 512] = [69 * 512 + 1];

[PROCESS_TABLE+1] = 0;
[PROCESS_TABLE+4] = CREATED;
[PROCESS_TABLE+11] = 82;
[PROCESS_TABLE+12] = 0;
[PROCESS_TABLE+13] = 8*512;
[PROCESS_TABLE+14] = PAGE_TABLE_BASE;
[PROCESS_TABLE+15] = 10;

//-----------INIT PROCESS--------------

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//load library to logical pages 0 and 1 from memory pages 63 and 64
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//intialize heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//load init code from memory pages 65 and 66 to logical page 4 and 5
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";

//stack pointer to top of the stack
SP = 8*512;
//store entry point in the header of the executable file to the top of the user stack
[76*512] = [65*512+1];

[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+20] = RUNNING;
[PROCESS_TABLE+27] = 83;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] =PAGE_TABLE_BASE + 20;
[PROCESS_TABLE+31] = 10;


//SET CURRENT PID TO SYSTEM STATUS TABLE
[SYSTEM_STATUS_TABLE+1] = 1;
ireturn;
