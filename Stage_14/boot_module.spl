//load init prog from disk
loadi(65,7);
loadi(66,8);

//interrupt 10 routine
loadi(22,35);
loadi(23,36);

//exception handler
loadi(2,15);
loadi(3,16);

//load library from disk
loadi(63,13);
loadi(64,14);

//load timer interrupt routine
loadi(4, 17);
loadi(5, 18);

//load INT7 from disk to memory.
loadi(16,29);
loadi(17,30);

//load exec prog
loadi(84,69);//from inode table exec prog present in page 69 of disk to next free page 84 in memory

//load scheduler
loadi(50,63);
loadi(51,64);



//--------INIT PROG(pid=1)------------

PTBR = PAGE_TABLE_BASE+20;
PTLR = 10;

//load library to logical pages 0 and 1 from memory pages 63 and 64
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//intialize heap
[PTBR+4] = 78;
[PTBR+5] = "0110";
[PTBR+6] = 79;
[PTBR+7] = "0110";

//load init code from memory pages 65 and 66 to logical page 4 and 5
[PTBR+8] = 65;
[PTBR+9] = "0100";
[PTBR+10] = 66;
[PTBR+11] = "0100";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 76;
[PTBR+17] = "0110";
[PTBR+18] = 77;
[PTBR+19] = "0110";



[PROCESS_TABLE+17] = 1;
[PROCESS_TABLE+20] = CREATED;
[PROCESS_TABLE+27] = 83;
[PROCESS_TABLE+28] = 0;
[PROCESS_TABLE+29] = 8*512;
[PROCESS_TABLE+30] =PAGE_TABLE_BASE + 20;
[PROCESS_TABLE+31] = 10;


//store entry point in the header of the executable file to the top of the user stack
[76*512] = [65*512+1];

//-------EXEC PROG(pid=2)--------

PTBR = PAGE_TABLE_BASE+40;
PTLR = 10;


//load library to logical pages 0 and 1 from memory pages 63 and 64
[PTBR+0] = 63;
[PTBR+1] = "0100";
[PTBR+2] = 64;
[PTBR+3] = "0100";

//intialize heap
[PTBR+4] = 85;
[PTBR+5] = "0110";
[PTBR+6] = 86;
[PTBR+7] = "0110";

//load init code from memory page 84 logical page 4
[PTBR+8] = 84;
[PTBR+9] = "0100";
[PTBR+10] = -1;
[PTBR+11] = "0000";
[PTBR+12] = -1;
[PTBR+13] = "0000";
[PTBR+14] = -1;
[PTBR+15] = "0000";

//stack
[PTBR+16] = 87;
[PTBR+17] = "0110";
[PTBR+18] = 88;
[PTBR+19] = "0110";

[PROCESS_TABLE+33] = 2;
[PROCESS_TABLE+36] = CREATED;
[PROCESS_TABLE+43] = 89;
[PROCESS_TABLE+44] = 0;
[PROCESS_TABLE+45] = 8*512;
[PROCESS_TABLE+46] =PAGE_TABLE_BASE + 40;
[PROCESS_TABLE+47] = 10;

//store entry point in the header of the executable file to the top of the user stack
[87*512] = [84*512+1];

//Initialize STATE field of all other process table entries to TERMINATED.
alias i R0;
i=3;
while( i < MAX_PROC_NUM) do
    [PROCESS_TABLE+i*16+4]=TERMINATED;
    i=i+1;
endwhile ;


return;


